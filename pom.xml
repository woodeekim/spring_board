<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.zerock</groupId>
    <artifactId>spring-board</artifactId>
    <version>1.0-SNAPSHOT</version>



    <build>
        <plugins>
            <!--IntelliJ는 기본적으로 1.5로 되어있어서 안바꾸면 에러-->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>

        <!-- Spring 필수 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.2.3.RELEASE</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Spring 필수 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>5.2.3.RELEASE</version>
            <scope>test</scope>
        </dependency>

        <!-- mybatis 필수 (1/4) -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>
        <!-- mybatis 필수 (2/4)  -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.3</version>
        </dependency>
        <!-- mybatis 필수 (3/4) / mybatis 와 관련없어 보이지만 없을 경우 에러  -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>5.2.3.RELEASE</version>
        </dependency>
        <!-- mybatis 필수 (4/4) / mybatis 와 관련없어 보이지만 없을 경우 에러  -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.3.RELEASE</version>
        </dependency>

        <!--최신 servlet -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>

        <!--Lombok 라이브러리 / Lombok이 해주는 역할은 getter, setter, 생성자등 자수 사용하는 메소드를 자동으로 생성해준다.-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!--HikariCP 라이브러리 / 커넥션 풀에도 여러종류가 있지만 히카리가 최신 유행의 커넥션 풀이다.-->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>3.4.2</version>
        </dependency>

        <!--JSON 데이터 구조를 처리해주는 라이브러리다 즉 JAVA 인스턴스를 JSON 타입의 문자열로 변환해준다.
        . 스프링 프레임워크 때 필수적으로 사용-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.10.5.1</version>
        </dependency>
        <!--JSON 을 테스트하기 위한 라이브러리-->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.6</version>
        </dependency>


        <!--요즘에는 log4j2 를 정식적으로 지원하는거 같은데..-
           ->현재 지원하지 않는 log4j를 github에 올리니 github 의존성 검사를 통해 바꾸라른
           알람이 왔다. 앞으로도 지원하지 않는 라이브러리는 사용하지 말자.

            <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>
       -->
        <!--log4j2-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.11.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.11.2</version>
        </dependency>

        <!--사진 업로드를 위한 라이브러리, Servlet 3.0 이상부터는 다른방식을 이용하는데 일단 이 방법부터.-->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.4</version>
        </dependency>

        <!--jsp 페이지에서 jstl(jsp standard tag library) 을 쓰기 위해서-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!--SQL에 전달되는 파라미터는 JDBC 에서 ?로 치환되어서 처리 되는데 ? 값을 어떤 값으로
            처리 되는지 보는 라이브러리다. 근데 너무 옛날거인데 아직도 이걸 쓰나?
       -->
        <dependency>
            <groupId>org.bgee.log4jdbc-log4j2</groupId>
            <artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
            <version>1.16</version>
        </dependency>

        <!--
        [에러]log4j 만 사용했을 때
        SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
        SLF4J: Defaulting to no-operation (NOP) logger implementation
        SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

        Process finished with exit code 0
        [해결]밑의 의존성을 추가 /버전이 안 맞아서 난 문제인듯?
        -->
        <!--
        slf4j library를 사용하는 이유?
        java에서 log4j를 이용한 로그를 출력하기 위해서는 Logger 클래스가 필요한데,
        slf4j library 내부에 Logger 클래스가 존재하므로 필요하다!
        -->
       <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.6.4</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/junit/junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13</version>
            <scope>test</scope>
        </dependency>

        <!--AOP를 위한 설정(1/2)-->
        <!--스프링의 AOP는 AspectJ라는 라이브러리의 도움을 많이 받는다.-->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.9.5</version>
        </dependency>
        <!--AOP를 위한 설정(2/2)-->
        <!--
            - AOP 설정과 관련해서 가장 중요한 라이브러리는
              AspectJ Weaver 라는 라이브러리다.
            - 스프링은 AOP 처리가 된 객체를 생성할 때 Aspects Weaver 라이브러리의
              도움을 받아서 동작한다.
        -->
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>





    </dependencies>


</project>